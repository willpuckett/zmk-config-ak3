/*
 * Copyright (c) 2021 Nick Winans
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// #define ENGRAMMER_BASE 1
#define ENGRAMMER_SHIFTED 1

//	M0487 Apple Standard Keyboard II
//	                    +-------+
//	                    | power |
//	                    +-------+
//	+---+---+---+---+---+---+---+---+---+---+---+---+---+-----+ +---+---+---+---+
//	| ` | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | - | = | bks | |clr| = | / | * |
//	+---------------------------------------------------------+ +---+---+---+---+
//	| tab | q | w | e | r | t | y | u | i | o | p | [ | ] | \ | | 7 | 8 | 9 | - |
//	+---------------------------------------------------------| +---+---+---+---+
//	| caps | a | s | d | f | g | h | j | k | l | ; | ' |return| | 4 | 5 | 6 | + |
//	+---------------------------------------------------------+ +---+---+---+---+
//	| shift  | z | x | c | v | b | n | m | , | . | / |  shift | | 1 | 2 | 3 |   |
//	+---------------------------------------------------------+ +-------+---|ent|
//	|ctrl|opt|comnd |                   | esc |lef|rig|dwn|up | |   0   | . |   |
//	+---------------------------------------------------------+ +-------+---+---+
//	

/ {
  behaviors {

    hrml: home_row_mod_left {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MOD_LEFT";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <HM_TAPPING_TERM>;
        hold-trigger-key-positions = < KEYS_R THUMBS >;
        hold-trigger-on-release;
        bindings = <&kp>, <&kp>;
        };

    hrmr: home_row_mod_right {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MOD_RIGHT";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <HM_TAPPING_TERM>;
        hold-trigger-key-positions = < KEYS_L THUMBS >;
        hold-trigger-on-release;
        bindings = <&kp>, <&kp>;
        };

    hrmls: home_row_mod_left_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MOD_LEFT_SHIFT";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <HM_TAPPING_TERM_FAST>;
        quick_tap_ms = <HM_TAPPING_TERM_QT>;
        hold-trigger-key-positions = < KEYS_R THUMBS >;
        bindings = <&kp>, <&kp>;
        };

    hrmrs: home_row_mod_right_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MOD_RIGHT_SHIFT";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <HM_TAPPING_TERM_FAST>;
        quick_tap_ms = <HM_TAPPING_TERM_QT>;
        hold-trigger-key-positions = < KEYS_L THUMBS >;
        bindings = <&kp>, <&kp>;
        };

    mqt: momentary-quick-tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MOMENTARY_QUICK_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        quick-tap-ms = <125>;
        global-quick-tap;
        bindings = <&mo>, <&kp>;
        };

    cwe: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "CAPS-WORD-DOUBLE_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp ESC>, <&caps_word>;
        };

    sqt_lpar: single-quote-left-paren {
        compatible = "zmk,behavior-mod-morph";
        label = "SINGLE_QUOTE_LEFT_PAREN";
        #binding-cells = <0>;
        bindings = <&kp SQT>, <&kp LPAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    dqt_rpar: double-quote-right-paren {
        compatible = "zmk,behavior-mod-morph";
        label = "DOUBLE_QUOTE_RIGHT_PAREN";
        #binding-cells = <0>;
        bindings = <&kp DQT>, <&kp RPAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    cma_semi: comma-semicolon {
        compatible = "zmk,behavior-mod-morph";
        label = "COMMA_SEMICOLON";
        #binding-cells = <0>;
        bindings = <&kp COMMA>, <&kp SEMI>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    stop_colon: stop-colon {
        compatible = "zmk,behavior-mod-morph";
        label = "STOP_COLON";
        #binding-cells = <0>;
        bindings = <&kp DOT>, <&kp COLON>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    qmark_excl: questionmark-exclamation {
        compatible = "zmk,behavior-mod-morph";
        label = "QUESTIONMARK_EXCLAMATION";
        #binding-cells = <0>;
        bindings = <&kp QMARK>, <&kp EXCL>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    slsh: forward-and-backslash {
        compatible = "zmk,behavior-mod-morph";
        label = "SLASHES";
        #binding-cells = <0>;
        bindings = <&kp FSLH>, <&kp BSLH>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    hash_buck: pound-dollar {
        compatible = "zmk,behavior-mod-morph";
        label = "HASH_BUCK";
        #binding-cells = <0>;
        bindings = <&kp POUND>, <&kp DOLLAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    at_til: at-tilde {
        compatible = "zmk,behavior-mod-morph";
        label = "AT_TILDE";
        #binding-cells = <0>;
        bindings = <&kp AT>, <&kp GRAVE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

     ZMK_MACRO(af,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp EQUAL  &kp GT>;
    )

    };




	keymap {
		compatible = "zmk,keymap";
		
	#ifdef ENGRAMMER_BASE
		engrammer_layer {
			label = "ENGRAMMER";
			bindings = < 
	&kp GRAVE &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp LBKT  &kp RBKT  &kp BSPC		&kp KP_CLEAR &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY
	&kp TAB  &kp B  &kp Y  &kp O  &kp U  &kp SQT  &kp  SEMI &kp L &kp D  &kp W  &kp V  &kp Z &kp EQUAL  &kp BSLH		&kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_MINUS
	&kp LCAPS  &kp C  &kp I  &kp E  &kp A  &kp COMMA  &kp DOT  &kp H    &kp T    &kp S    &kp N  &kp Q    &kp RET		&kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_PLUS
	&kp LSHFT &kp G  &kp X  &kp J  &kp K  &kp MINUS  &kp FSLH   &kp R   &kp M  &kp F      &kp P        &kp LSHFT		&kp KP_N1 &kp KP_N2 &kp KP_N3 
	&kp LCTRL &kp LALT &kp LGUI             &kp SPACE              &kp ESC  &kp LEFT &kp RIGHT &kp DOWN   &kp UP         &kp KP_N0 &kp KP_DOT &kp KP_ENTER
			>;
		};
	#elif ENGRAMMER_SHIFTED
		engrammer_layer {
			label = "ENGRAMMER_SHIFTED";
			bindings = < 
	&gresc    &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp LBKT  &kp RBKT  &kp BSPC															&kp KP_CLEAR &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY
	&kp TAB  &kp B  &kp Y  &kp O  &kp U  &kp SQT  &kp  SEMI &kp L &kp D  &kp W  &kp V  &kp Z &kp EQUAL  &kp BSLH															&kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_MINUS
	&kp LCAPS  &hrml LCTRL C &hrml LALT I &hrml LGUI E &hrmls LSHFT A   &kp COMMA   &kp DOT  &hrmrs LSHFT H   &hrmr RGUI T &hrmr RALT S &hrmr RCTRL N  &kp Q   &kp RET		&kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_PLUS
	&kp G      &kp X  &kp J  &kp K  &kp MINUS     &af     &kp FSLH   &kp R   &kp M  &kp F      &kp P       &kp G															&kp KP_N1 &kp KP_N2 &kp KP_N3 
	&kp LCTRL &kp LALT &kp BSPC             &kp SPACE              &kp RET  &kp LEFT &kp RIGHT &kp DOWN   &kp UP       												    	&kp KP_N0 &kp KP_DOT &kp KP_ENTER
			>;
		};
	#else
		qwerty_layer {
			label = "QWERTY";
			bindings = <
	&kp GRAVE &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp MINUS &kp EQUAL &kp BSPC		&kp KP_CLEAR &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY
	&kp TAB  &kp Q  &kp W  &kp E  &kp R  &kp T  &kp Y  &kp U  &kp I  &kp O  &kp P  &kp LBKT  &kp RBKT   &kp BSLH		&kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_MINUS
	&kp LCAPS  &kp A  &kp S  &kp D  &kp F  &kp G  &kp H  &kp J  &kp K  &kp L  &kp SEMI &kp SQT            &kp RET		&kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_PLUS
	&kp LSHFT   &kp Z  &kp X  &kp C  &kp V  &kp B  &kp N  &kp M  &kp COMMA &kp DOT &kp FSLH            &kp LSHFT		&kp KP_N1 &kp KP_N2 &kp KP_N3 
	&kp LCTRL &kp LALT &kp LGUI             &kp SPACE              &kp ESC  &kp LEFT &kp RIGHT &kp DOWN   &kp UP        &kp KP_N0 &kp KP_DOT &kp KP_ENTER
			>;
		};
	#endif

	};
};


