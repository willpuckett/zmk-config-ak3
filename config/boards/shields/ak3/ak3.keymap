/*
 * Copyright (c) 2021 Nick Winans
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// #define ENGRAMMER_BASE 1
#define ENGRAMMER_SHIFTED 1

#define NAV_L 1


#define KEYS_L 0 1 2 3 4 5 18 19 20 21 22 23 36 37 38 39 40 41 53 54 55 56 57 58  // left-hand keys
#define KEYS_R 6 7 8 9 10 11 12 13 24 25 26 27 28 29 30 31 42 43 44 45 46 47 48 59 60 61 62 63 64 // right-hand keys
#define THUMBS 68 69 70 71 72 73 74 75 76 // thumb keys
#define NP 14 15 16 17 32 33 34 35 49 50 51 52 65 66 67 77 78 79 // number pad keys

#define HM_TAPPING_TERM 1000
#define HM_TAPPING_TERM_FAST 200
#define HM_TAPPING_TERM_QT 175

//	M0487 Apple Standard Keyboard II
//	                    +-------+
//	                    | power |
//	                    +-------+
//	+---+---+---+---+---+---+---+---+---+---+---+---+---+-----+ +---+---+---+---+
//	| ` | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | - | = | bks | |clr| = | / | * |
//	+---------------------------------------------------------+ +---+---+---+---+
//	| tab | q | w | e | r | t | y | u | i | o | p | [ | ] | \ | | 7 | 8 | 9 | - |
//	+---------------------------------------------------------| +---+---+---+---+
//	| caps | a | s | d | f | g | h | j | k | l | ; | ' |return| | 4 | 5 | 6 | + |
//	+---------------------------------------------------------+ +---+---+---+---+
//	| shift  | z | x | c | v | b | n | m | , | . | / |  shift | | 1 | 2 | 3 |   |
//	+---------------------------------------------------------+ +-------+---|ent|
//	|ctrl|opt|comnd |                   | esc |lef|rig|dwn|up | |   0   | . |   |
//	+---------------------------------------------------------+ +-------+---+---+
//	

/ {
  behaviors {

    hrml: home_row_mod_left {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MOD_LEFT";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <HM_TAPPING_TERM>;
        hold-trigger-key-positions = < KEYS_R THUMBS NP>;
        hold-trigger-on-release;
        bindings = <&kp>, <&kp>;
        };

    hrmr: home_row_mod_right {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MOD_RIGHT";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <HM_TAPPING_TERM>;
        hold-trigger-key-positions = < KEYS_L THUMBS NP>;
        hold-trigger-on-release;
        bindings = <&kp>, <&kp>;
        };

    hrmls: home_row_mod_left_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MOD_LEFT_SHIFT";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <HM_TAPPING_TERM_FAST>;
        quick_tap_ms = <HM_TAPPING_TERM_QT>;
        hold-trigger-key-positions = < KEYS_R THUMBS NP>;
        bindings = <&kp>, <&kp>;
        };

    hrmrs: home_row_mod_right_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MOD_RIGHT_SHIFT";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <HM_TAPPING_TERM_FAST>;
        quick_tap_ms = <HM_TAPPING_TERM_QT>;
        hold-trigger-key-positions = < KEYS_L THUMBS NP>;
        bindings = <&kp>, <&kp>;
        };

    mqt: momentary-quick-tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MOMENTARY_QUICK_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        quick-tap-ms = <125>;
        global-quick-tap;
        bindings = <&mo>, <&kp>;
        };

    cwe: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "CAPS-WORD-DOUBLE_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp ESC>, <&caps_word>;
        };


	// The remaining behaviors are for plain Engram
    sqt_lpar: single-quote-left-paren {
        compatible = "zmk,behavior-mod-morph";
        label = "SINGLE_QUOTE_LEFT_PAREN";
        #binding-cells = <0>;
        bindings = <&kp SQT>, <&kp LPAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    dqt_rpar: double-quote-right-paren {
        compatible = "zmk,behavior-mod-morph";
        label = "DOUBLE_QUOTE_RIGHT_PAREN";
        #binding-cells = <0>;
        bindings = <&kp DQT>, <&kp RPAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    cma_semi: comma-semicolon {
        compatible = "zmk,behavior-mod-morph";
        label = "COMMA_SEMICOLON";
        #binding-cells = <0>;
        bindings = <&kp COMMA>, <&kp SEMI>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    stop_colon: stop-colon {
        compatible = "zmk,behavior-mod-morph";
        label = "STOP_COLON";
        #binding-cells = <0>;
        bindings = <&kp DOT>, <&kp COLON>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    qmark_excl: questionmark-exclamation {
        compatible = "zmk,behavior-mod-morph";
        label = "QUESTIONMARK_EXCLAMATION";
        #binding-cells = <0>;
        bindings = <&kp QMARK>, <&kp EXCL>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    slsh: forward-and-backslash {
        compatible = "zmk,behavior-mod-morph";
        label = "SLASHES";
        #binding-cells = <0>;
        bindings = <&kp FSLH>, <&kp BSLH>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    hash_buck: pound-dollar {
        compatible = "zmk,behavior-mod-morph";
        label = "HASH_BUCK";
        #binding-cells = <0>;
        bindings = <&kp POUND>, <&kp DOLLAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    at_til: at-tilde {
        compatible = "zmk,behavior-mod-morph";
        label = "AT_TILDE";
        #binding-cells = <0>;
        bindings = <&kp AT>, <&kp GRAVE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

	// except this one, which is handy for js
     ZMK_MACRO(af,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp EQUAL  &kp GT>;
    )

    };




	keymap {
		compatible = "zmk,keymap";
		
	#ifdef ENGRAMMER_BASE
		engrammer_layer {
			label = "ENGRAMMER";
			bindings = < 
	&kp GRAVE &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp LBKT  &kp RBKT  &kp BSPC		&kp KP_CLEAR &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY
	&kp TAB  &kp B  &kp Y  &kp O  &kp U  &kp SQT  &kp  SEMI &kp L &kp D  &kp W  &kp V  &kp Z &kp EQUAL  &kp BSLH		&kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_MINUS
	&kp CAPS  &kp C  &kp I  &kp E  &kp A  &kp COMMA  &kp DOT  &kp H    &kp T    &kp S    &kp N  &kp Q    &kp RET		&kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_PLUS
	&kp LSHFT &kp G  &kp X  &kp J  &kp K  &kp MINUS  &kp FSLH   &kp R   &kp M  &kp F      &kp P        &kp LSHFT		&kp KP_N1 &kp KP_N2 &kp KP_N3 
	&kp LCTRL &kp LALT &kp LGUI             &kp SPACE              &kp ESC  &kp LEFT &kp RIGHT &kp DOWN   &kp UP         &kp KP_N0 &kp KP_DOT &kp KP_ENTER
			>;
		};
	#elif ENGRAMMER_SHIFTED
		engrammer_layer {
			label = "ENGRAMMER_SHIFTED";
			bindings = < 
	&kp GRAVE &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp LBKT  &kp RBKT  &kp BSPC													        &kp KP_CLEAR &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY
	&kp TAB  &kp B  &kp Y  &kp O  &kp U  &kp SQT  &kp  SEMI &kp L &kp D  &kp W  &kp V  &kp Z &kp EQUAL  &kp BSLH													        &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_MINUS
	&mqt NAV_L CAPS &hrml LCTRL C &hrml LALT I &hrml LGUI E &hrmls LSHFT A &kp COMMA &kp DOT &hrmrs LSHFT H &hrmr RGUI T &hrmr RALT S &hrmr RCTRL N &mqt NAV_L Q &kp RET	&kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_PLUS
	&kp G      &kp X  &kp J  &kp K  &kp MINUS     &af     &kp FSLH   &kp R   &kp M  &kp F      &kp P       &kp G															&kp KP_N1 &kp KP_N2 &kp KP_N3 
	&kp GLOBE   &cwe   &kp BSPC             &kp SPACE              &kp RET  &kp LEFT &kp DOWN &kp UP   &kp RIGHT       												    	&kp KP_N0 &kp KP_DOT &kp KP_ENTER
			>;
		};
	#else
		qwerty_layer {
			label = "QWERTY";
			bindings = <
	&kp GRAVE &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp MINUS &kp EQUAL &kp BSPC		&kp KP_CLEAR &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY
	&kp TAB  &kp Q  &kp W  &kp E  &kp R  &kp T  &kp Y  &kp U  &kp I  &kp O  &kp P  &kp LBKT  &kp RBKT   &kp BSLH		&kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_MINUS
	&kp CAPS  &kp A  &kp S  &kp D  &kp F  &kp G  &kp H  &kp J  &kp K  &kp L  &kp SEMI &kp SQT            &kp RET		&kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_PLUS
	&kp LSHFT   &kp Z  &kp X  &kp C  &kp V  &kp B  &kp N  &kp M  &kp COMMA &kp DOT &kp FSLH            &kp LSHFT		&kp KP_N1 &kp KP_N2 &kp KP_N3 
	&kp LCTRL &kp LALT &kp LGUI             &kp SPACE              &kp ESC  &kp LEFT &kp RIGHT &kp DOWN   &kp UP        &kp KP_N0 &kp KP_DOT &kp KP_ENTER
			>;
		};
	#endif

		nav_layer {
			label = "NAV";
			bindings = < 
	&trans &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &kp F11  &kp F12  &trans															            &trans &trans &trans &trans
	&trans &kp EXCL &kp AT  &kp LBKT &kp RBKT  &trans   &trans  &kp HOME  &kp PG_DN &kp PG_UP  &kp END &trans &trans  &trans										            &trans &trans &trans &trans
	&trans &hrml LCTRL LPAR &hrml LALT RPAR &hrml LGUI LBRC &hrmls LSHFT RBRC  &af &trans &hrmrs LSHFT LARW &hrmr RGUI DARW &hrmr RALT UARW &hrmr RCTRL RARW  &trans  &trans    &trans &trans &trans &trans
	&kp LT &kp SLASH  &kp EQUAL &kp GT &trans  &trans &kp LS(LG(Z))  &kp LG(Z)  &kp LG(X) &kp LG(C)  &kp LG(V)  &trans														    &trans &trans &trans 
	&trans &trans &trans             &trans              &trans  &trans &trans &trans   &trans       												    	                    &trans &trans &trans
			>;
		};

	};
};


